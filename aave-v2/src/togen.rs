/// This file should be autogenerated at some point, based on the ABIs.
use substreams_ethereum::pb::eth as pbeth;

use crate::abi::AToken::events as a_token;
use crate::abi::IncentivesController::events as incentives_controller;
use crate::abi::LendingPool::events as lending_pool;
use crate::abi::LendingPoolConfigurator::events as lending_pool_configurator;
use crate::abi::StableDebtToken::events as stable_debt_token;
use crate::abi::VariableDebtToken::events as variable_debt_token;

use substreams_helper::hex::Hexable;

use crate::pb::aave_v2::v1 as events;
use crate::pb::aave_v2::v1::AaveV2Event;

pub struct EventMeta {
    pub timestamp: i64,
    pub transaction_hash: Vec<u8>,
    pub block_hash: Vec<u8>,
    pub address: Vec<u8>,
    pub log_index: u32,
}

pub trait ToPbEvent {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event;
}

impl ToPbEvent for lending_pool::Deposit {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Deposit(events::Deposit {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                reserve: self.reserve.to_hex(),
                user: self.user.to_hex(),
                on_behalf_of: self.on_behalf_of.to_hex(),
                amount: Some(self.amount.into()),
                referral: Some(self.referral.into()),
            })),
        }
    }
}

impl ToPbEvent for lending_pool::Borrow {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Borrow(events::Borrow {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                reserve: self.reserve.to_hex(),
                user: self.user.to_hex(),
                on_behalf_of: self.on_behalf_of.to_hex(),
                amount: Some(self.amount.into()),
                borrow_rate_mode: Some(self.borrow_rate_mode.into()),
                borrow_rate: Some(self.borrow_rate.into()),
                referral: Some(self.referral.into()),
            })),
        }
    }
}

impl ToPbEvent for lending_pool::FlashLoan {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::FlashLoan(events::FlashLoan {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                target: self.target.to_hex(),
                initiator: self.initiator.to_hex(),
                asset: self.asset.to_hex(),
                amount: Some(self.amount.into()),
                premium: Some(self.premium.into()),
                referral_code: Some(self.referral_code.into()),
            })),
        }
    }
}

impl ToPbEvent for lending_pool::LiquidationCall {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::LiquidationCall(
                events::LiquidationCall {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    collateral_asset: self.collateral_asset.to_hex(),
                    debt_asset: self.debt_asset.to_hex(),
                    user: self.user.to_hex(),
                    debt_to_cover: Some(self.debt_to_cover.into()),
                    liquidated_collateral_amount: Some(self.liquidated_collateral_amount.into()),
                    liquidator: self.liquidator.to_hex(),
                    receive_a_token: self.receive_a_token,
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool::Paused {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Paused(events::Paused {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),
            })),
        }
    }
}

impl ToPbEvent for lending_pool::RebalanceStableBorrowRate {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::RebalanceStableBorrowRate(
                events::RebalanceStableBorrowRate {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    reserve: self.reserve.to_hex(),
                    user: self.user.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool::Repay {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Repay(events::Repay {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                reserve: self.reserve.to_hex(),
                user: self.user.to_hex(),
                repayer: self.repayer.to_hex(),
                amount: Some(self.amount.into()),
            })),
        }
    }
}

impl ToPbEvent for lending_pool::ReserveDataUpdated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ReserveDataUpdated(
                events::ReserveDataUpdated {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    reserve: self.reserve.to_hex(),
                    liquidity_rate: Some(self.liquidity_rate.into()),
                    stable_borrow_rate: Some(self.stable_borrow_rate.into()),
                    variable_borrow_rate: Some(self.variable_borrow_rate.into()),
                    liquidity_index: Some(self.liquidity_index.into()),
                    variable_borrow_index: Some(self.variable_borrow_index.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool::ReserveUsedAsCollateralDisabled {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(
                events::aave_v2_event::Event::ReserveUsedAsCollateralDisabled(
                    events::ReserveUsedAsCollateralDisabled {
                        timestamp: meta.timestamp,
                        transaction_hash: meta.transaction_hash.to_hex(),
                        log_index: meta.log_index,
                        address: meta.address.to_hex(),
                        block_hash: meta.block_hash.to_hex(),

                        reserve: self.reserve.to_hex(),
                        user: self.user.to_hex(),
                    },
                ),
            ),
        }
    }
}

impl ToPbEvent for lending_pool::ReserveUsedAsCollateralEnabled {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(
                events::aave_v2_event::Event::ReserveUsedAsCollateralEnabled(
                    events::ReserveUsedAsCollateralEnabled {
                        timestamp: meta.timestamp,
                        transaction_hash: meta.transaction_hash.to_hex(),
                        log_index: meta.log_index,
                        address: meta.address.to_hex(),
                        block_hash: meta.block_hash.to_hex(),

                        reserve: self.reserve.to_hex(),
                        user: self.user.to_hex(),
                    },
                ),
            ),
        }
    }
}

impl ToPbEvent for lending_pool::Swap {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Swap(events::Swap {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                reserve: self.reserve.to_hex(),
                user: self.user.to_hex(),
                rate_mode: Some(self.rate_mode.into()),
            })),
        }
    }
}

impl ToPbEvent for lending_pool::Unpaused {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Unpaused(events::Unpaused {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),
            })),
        }
    }
}

impl ToPbEvent for lending_pool::Withdraw {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Withdraw(events::Withdraw {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                reserve: self.reserve.to_hex(),
                user: self.user.to_hex(),
                to: self.to.to_hex(),
                amount: Some(self.amount.into()),
            })),
        }
    }
}

impl ToPbEvent for incentives_controller::AssetConfigUpdated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::AssetConfigUpdated(
                events::AssetConfigUpdated {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                    emission: Some(self.emission.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for incentives_controller::AssetIndexUpdated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::AssetIndexUpdated(
                events::AssetIndexUpdated {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                    index: Some(self.index.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for incentives_controller::ClaimerSet {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ClaimerSet(
                events::ClaimerSet {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    user: self.user.to_hex(),
                    claimer: self.claimer.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for incentives_controller::DistributionEndUpdated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::DistributionEndUpdated(
                events::DistributionEndUpdated {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    ditribution_end: Some(self.ditribution_end.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for incentives_controller::PendingAdminChanged {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::PendingAdminChanged(
                events::PendingAdminChanged {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    new_pending_admin: self.new_pending_admin.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for incentives_controller::RewardsAccrued {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::RewardsAccrued(
                events::RewardsAccrued {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    user: self.user.to_hex(),
                    amount: Some(self.amount.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for incentives_controller::RewardsClaimed {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::RewardsClaimed(
                events::RewardsClaimed {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    user: self.user.to_hex(),
                    to: self.to.to_hex(),
                    claimer: self.claimer.to_hex(),
                    amount: Some(self.amount.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for incentives_controller::RewardsVaultUpdated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::RewardsVaultUpdated(
                events::RewardsVaultUpdated {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    vault: self.vault.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for incentives_controller::RoleClaimed {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::RoleClaimed(
                events::RoleClaimed {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    new_adming: self.new_adming.to_hex(),
                    role: Some(self.role.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for incentives_controller::UserIndexUpdated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::UserIndexUpdated(
                events::UserIndexUpdated {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    user: self.user.to_hex(),
                    asset: self.asset.to_hex(),
                    index: Some(self.index.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::ATokenUpgraded {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ATokenUpgraded(
                events::ATokenUpgraded {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                    proxy: self.proxy.to_hex(),
                    implementation: self.implementation.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::BorrowingDisabledOnReserve {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::BorrowingDisabledOnReserve(
                events::BorrowingDisabledOnReserve {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::BorrowingEnabledOnReserve {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::BorrowingEnabledOnReserve(
                events::BorrowingEnabledOnReserve {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                    stable_rate_enabled: self.stable_rate_enabled,
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::CollateralConfigurationChanged {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(
                events::aave_v2_event::Event::CollateralConfigurationChanged(
                    events::CollateralConfigurationChanged {
                        timestamp: meta.timestamp,
                        transaction_hash: meta.transaction_hash.to_hex(),
                        log_index: meta.log_index,
                        address: meta.address.to_hex(),
                        block_hash: meta.block_hash.to_hex(),

                        asset: self.asset.to_hex(),
                        ltv: Some(self.ltv.into()),
                        liquidation_threshold: Some(self.liquidation_threshold.into()),
                        liquidation_bonus: Some(self.liquidation_bonus.into()),
                    },
                ),
            ),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::ReserveActivated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ReserveActivated(
                events::ReserveActivated {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::ReserveDeactivated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ReserveDeactivated(
                events::ReserveDeactivated {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::ReserveDecimalsChanged {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ReserveDecimalsChanged(
                events::ReserveDecimalsChanged {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                    decimals: Some(self.decimals.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::ReserveFactorChanged {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ReserveFactorChanged(
                events::ReserveFactorChanged {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                    factor: Some(self.factor.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::ReserveFrozen {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ReserveFrozen(
                events::ReserveFrozen {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::ReserveInitialized {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ReserveInitialized(
                events::ReserveInitialized {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                    a_token: self.a_token.to_hex(),
                    stable_debt_token: self.stable_debt_token.to_hex(),
                    variable_debt_token: self.variable_debt_token.to_hex(),
                    interest_rate_strategy_address: self.interest_rate_strategy_address.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::ReserveInterestRateStrategyChanged {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(
                events::aave_v2_event::Event::ReserveInterestRateStrategyChanged(
                    events::ReserveInterestRateStrategyChanged {
                        timestamp: meta.timestamp,
                        transaction_hash: meta.transaction_hash.to_hex(),
                        log_index: meta.log_index,
                        address: meta.address.to_hex(),
                        block_hash: meta.block_hash.to_hex(),

                        asset: self.asset.to_hex(),
                        strategy: self.strategy.to_hex(),
                    },
                ),
            ),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::ReserveUnfrozen {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::ReserveUnfrozen(
                events::ReserveUnfrozen {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::StableDebtTokenUpgraded {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::StableDebtTokenUpgraded(
                events::StableDebtTokenUpgraded {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                    proxy: self.proxy.to_hex(),
                    implementation: self.implementation.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::StableRateDisabledOnReserve {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::StableRateDisabledOnReserve(
                events::StableRateDisabledOnReserve {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::StableRateEnabledOnReserve {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::StableRateEnabledOnReserve(
                events::StableRateEnabledOnReserve {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for lending_pool_configurator::VariableDebtTokenUpgraded {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::VariableDebtTokenUpgraded(
                events::VariableDebtTokenUpgraded {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    asset: self.asset.to_hex(),
                    proxy: self.proxy.to_hex(),
                    implementation: self.implementation.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for a_token::Approval {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Approval(events::Approval {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                owner: self.owner.to_hex(),
                spender: self.spender.to_hex(),
                value: Some(self.value.into()),
            })),
        }
    }
}

impl ToPbEvent for a_token::BalanceTransfer {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::BalanceTransfer(
                events::BalanceTransfer {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    from: self.from.to_hex(),
                    to: self.to.to_hex(),
                    value: Some(self.value.into()),
                    index: Some(self.index.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for a_token::Burn {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Burn(events::Burn {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                from: self.from.to_hex(),
                target: self.target.to_hex(),
                value: Some(self.value.into()),
                index: Some(self.index.into()),
            })),
        }
    }
}

impl ToPbEvent for a_token::Initialized {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Initialized(
                events::Initialized {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    underlying_asset: self.underlying_asset.to_hex(),
                    pool: self.pool.to_hex(),
                    treasury: self.treasury.to_hex(),
                    incentives_controller: self.incentives_controller.to_hex(),
                    a_token_decimals: Some(self.a_token_decimals.into()),
                    a_token_name: self.a_token_name,
                    a_token_symbol: self.a_token_symbol,
                    params: self.params.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for a_token::Mint {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Mint(events::Mint {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                from: self.from.to_hex(),
                value: Some(self.value.into()),
                index: Some(self.index.into()),
            })),
        }
    }
}

impl ToPbEvent for a_token::Transfer {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Transfer(events::Transfer {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                from: self.from.to_hex(),
                to: self.to.to_hex(),
                value: Some(self.value.into()),
            })),
        }
    }
}

impl ToPbEvent for stable_debt_token::Approval {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Approval(events::Approval {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                owner: self.owner.to_hex(),
                spender: self.spender.to_hex(),
                value: Some(self.value.into()),
            })),
        }
    }
}

impl ToPbEvent for stable_debt_token::Transfer {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Transfer(events::Transfer {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                from: self.from.to_hex(),
                to: self.to.to_hex(),
                value: Some(self.value.into()),
            })),
        }
    }
}

impl ToPbEvent for stable_debt_token::BorrowAllowanceDelegated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::BorrowAllowanceDelegated(
                events::BorrowAllowanceDelegated {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    from_user: self.from_user.to_hex(),
                    to_user: self.to_user.to_hex(),
                    asset: self.asset.to_hex(),
                    amount: Some(self.amount.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for stable_debt_token::Burn {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::StableDebtTokenBurn(
                events::StableDebtTokenBurn {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    user: self.user.to_hex(),
                    amount: Some(self.amount.into()),
                    current_balance: Some(self.current_balance.into()),
                    balance_increase: Some(self.balance_increase.into()),
                    avg_stable_rate: Some(self.avg_stable_rate.into()),
                    new_total_supply: Some(self.new_total_supply.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for stable_debt_token::Initialized {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::StableDebtTokenInitialized(
                events::StableDebtTokenInitialized {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    underlying_asset: self.underlying_asset.to_hex(),
                    pool: self.pool.to_hex(),
                    incentives_controller: self.incentives_controller.to_hex(),
                    debt_token_decimals: Some(self.debt_token_decimals.into()),
                    debt_token_name: self.debt_token_name,
                    debt_token_symbol: self.debt_token_symbol,
                    params: self.params.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for stable_debt_token::Mint {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::StableDebtTokenMint(
                events::StableDebtTokenMint {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    user: self.user.to_hex(),
                    on_behalf_of: self.on_behalf_of.to_hex(),
                    amount: Some(self.amount.into()),
                    current_balance: Some(self.current_balance.into()),
                    balance_increase: Some(self.balance_increase.into()),
                    new_rate: Some(self.new_rate.into()),
                    avg_stable_rate: Some(self.avg_stable_rate.into()),
                    new_total_supply: Some(self.new_total_supply.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for variable_debt_token::Approval {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Approval(events::Approval {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                owner: self.owner.to_hex(),
                spender: self.spender.to_hex(),
                value: Some(self.value.into()),
            })),
        }
    }
}

impl ToPbEvent for variable_debt_token::Transfer {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::Transfer(events::Transfer {
                timestamp: meta.timestamp,
                transaction_hash: meta.transaction_hash.to_hex(),
                log_index: meta.log_index,
                address: meta.address.to_hex(),
                block_hash: meta.block_hash.to_hex(),

                from: self.from.to_hex(),
                to: self.to.to_hex(),
                value: Some(self.value.into()),
            })),
        }
    }
}

impl ToPbEvent for variable_debt_token::BorrowAllowanceDelegated {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(
                events::aave_v2_event::Event::VariableDebtTokenBorrowAllowanceDelegated(
                    events::VariableDebtTokenBorrowAllowanceDelegated {
                        timestamp: meta.timestamp,
                        transaction_hash: meta.transaction_hash.to_hex(),
                        log_index: meta.log_index,
                        address: meta.address.to_hex(),
                        block_hash: meta.block_hash.to_hex(),

                        from_user: self.from_user.to_hex(),
                        to_user: self.to_user.to_hex(),
                        asset: self.asset.to_hex(),
                        amount: Some(self.amount.into()),
                    },
                ),
            ),
        }
    }
}

impl ToPbEvent for variable_debt_token::Burn {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::VariableDebtTokenBurn(
                events::VariableDebtTokenBurn {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    user: self.user.to_hex(),
                    amount: Some(self.amount.into()),
                    index: Some(self.index.into()),
                },
            )),
        }
    }
}

impl ToPbEvent for variable_debt_token::Initialized {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::VariableDebtTokenInitialized(
                events::VariableDebtTokenInitialized {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    underlying_asset: self.underlying_asset.to_hex(),
                    pool: self.pool.to_hex(),
                    incentives_controller: self.incentives_controller.to_hex(),
                    debt_token_decimals: Some(self.debt_token_decimals.into()),
                    debt_token_name: self.debt_token_name,
                    debt_token_symbol: self.debt_token_symbol,
                    params: self.params.to_hex(),
                },
            )),
        }
    }
}

impl ToPbEvent for variable_debt_token::Mint {
    fn to_pb(self: Self, meta: &EventMeta) -> AaveV2Event {
        AaveV2Event {
            event: Some(events::aave_v2_event::Event::VariableDebtTokenMint(
                events::VariableDebtTokenMint {
                    timestamp: meta.timestamp,
                    transaction_hash: meta.transaction_hash.to_hex(),
                    log_index: meta.log_index,
                    address: meta.address.to_hex(),
                    block_hash: meta.block_hash.to_hex(),

                    from: self.from.to_hex(),
                    on_behalf_of: self.on_behalf_of.to_hex(),
                    value: Some(self.value.into()),
                    index: Some(self.index.into()),
                },
            )),
        }
    }
}

pub fn log_to_event(log: &pbeth::v2::Log, meta: &EventMeta) -> Option<AaveV2Event> {
    if lending_pool::Borrow::match_log(log) {
        return Some(lending_pool::Borrow::decode(log).unwrap().to_pb(meta));
    }
    if lending_pool::Deposit::match_log(log) {
        return Some(lending_pool::Deposit::decode(log).unwrap().to_pb(meta));
    }
    if lending_pool::FlashLoan::match_log(log) {
        return Some(lending_pool::FlashLoan::decode(log).unwrap().to_pb(meta));
    }
    if lending_pool::LiquidationCall::match_log(log) {
        return Some(
            lending_pool::LiquidationCall::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool::Paused::match_log(log) {
        return Some(lending_pool::Paused::decode(log).unwrap().to_pb(meta));
    }
    if lending_pool::RebalanceStableBorrowRate::match_log(log) {
        return Some(
            lending_pool::RebalanceStableBorrowRate::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool::Repay::match_log(log) {
        return Some(lending_pool::Repay::decode(log).unwrap().to_pb(meta));
    }
    if lending_pool::ReserveDataUpdated::match_log(log) {
        return Some(
            lending_pool::ReserveDataUpdated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool::ReserveUsedAsCollateralDisabled::match_log(log) {
        return Some(
            lending_pool::ReserveUsedAsCollateralDisabled::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool::ReserveUsedAsCollateralEnabled::match_log(log) {
        return Some(
            lending_pool::ReserveUsedAsCollateralEnabled::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool::Swap::match_log(log) {
        return Some(lending_pool::Swap::decode(log).unwrap().to_pb(meta));
    }
    if lending_pool::Unpaused::match_log(log) {
        return Some(lending_pool::Unpaused::decode(log).unwrap().to_pb(meta));
    }
    if lending_pool::Withdraw::match_log(log) {
        return Some(lending_pool::Withdraw::decode(log).unwrap().to_pb(meta));
    }
    if incentives_controller::AssetConfigUpdated::match_log(log) {
        return Some(
            incentives_controller::AssetConfigUpdated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if incentives_controller::AssetIndexUpdated::match_log(log) {
        return Some(
            incentives_controller::AssetIndexUpdated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if incentives_controller::ClaimerSet::match_log(log) {
        return Some(
            incentives_controller::ClaimerSet::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if incentives_controller::DistributionEndUpdated::match_log(log) {
        return Some(
            incentives_controller::DistributionEndUpdated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if incentives_controller::PendingAdminChanged::match_log(log) {
        return Some(
            incentives_controller::PendingAdminChanged::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if incentives_controller::RewardsAccrued::match_log(log) {
        return Some(
            incentives_controller::RewardsAccrued::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if incentives_controller::RewardsClaimed::match_log(log) {
        return Some(
            incentives_controller::RewardsClaimed::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if incentives_controller::RewardsVaultUpdated::match_log(log) {
        return Some(
            incentives_controller::RewardsVaultUpdated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if incentives_controller::RoleClaimed::match_log(log) {
        return Some(
            incentives_controller::RoleClaimed::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if incentives_controller::UserIndexUpdated::match_log(log) {
        return Some(
            incentives_controller::UserIndexUpdated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::ATokenUpgraded::match_log(log) {
        return Some(
            lending_pool_configurator::ATokenUpgraded::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::BorrowingDisabledOnReserve::match_log(log) {
        return Some(
            lending_pool_configurator::BorrowingDisabledOnReserve::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::BorrowingEnabledOnReserve::match_log(log) {
        return Some(
            lending_pool_configurator::BorrowingEnabledOnReserve::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::CollateralConfigurationChanged::match_log(log) {
        return Some(
            lending_pool_configurator::CollateralConfigurationChanged::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::ReserveActivated::match_log(log) {
        return Some(
            lending_pool_configurator::ReserveActivated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::ReserveDeactivated::match_log(log) {
        return Some(
            lending_pool_configurator::ReserveDeactivated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::ReserveDecimalsChanged::match_log(log) {
        return Some(
            lending_pool_configurator::ReserveDecimalsChanged::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::ReserveFactorChanged::match_log(log) {
        return Some(
            lending_pool_configurator::ReserveFactorChanged::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::ReserveFrozen::match_log(log) {
        return Some(
            lending_pool_configurator::ReserveFrozen::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::ReserveInitialized::match_log(log) {
        return Some(
            lending_pool_configurator::ReserveInitialized::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::ReserveInterestRateStrategyChanged::match_log(log) {
        return Some(
            lending_pool_configurator::ReserveInterestRateStrategyChanged::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::ReserveUnfrozen::match_log(log) {
        return Some(
            lending_pool_configurator::ReserveUnfrozen::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::StableDebtTokenUpgraded::match_log(log) {
        return Some(
            lending_pool_configurator::StableDebtTokenUpgraded::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::StableRateDisabledOnReserve::match_log(log) {
        return Some(
            lending_pool_configurator::StableRateDisabledOnReserve::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::StableRateEnabledOnReserve::match_log(log) {
        return Some(
            lending_pool_configurator::StableRateEnabledOnReserve::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if lending_pool_configurator::VariableDebtTokenUpgraded::match_log(log) {
        return Some(
            lending_pool_configurator::VariableDebtTokenUpgraded::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if a_token::Approval::match_log(log) {
        return Some(a_token::Approval::decode(log).unwrap().to_pb(meta));
    }
    if a_token::BalanceTransfer::match_log(log) {
        return Some(a_token::BalanceTransfer::decode(log).unwrap().to_pb(meta));
    }
    if a_token::Burn::match_log(log) {
        return Some(a_token::Burn::decode(log).unwrap().to_pb(meta));
    }
    if a_token::Initialized::match_log(log) {
        return Some(a_token::Initialized::decode(log).unwrap().to_pb(meta));
    }
    if a_token::Mint::match_log(log) {
        return Some(a_token::Mint::decode(log).unwrap().to_pb(meta));
    }
    if a_token::Transfer::match_log(log) {
        return Some(a_token::Transfer::decode(log).unwrap().to_pb(meta));
    }
    if stable_debt_token::Approval::match_log(log) {
        return Some(
            stable_debt_token::Approval::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if stable_debt_token::Burn::match_log(log) {
        return Some(stable_debt_token::Burn::decode(log).unwrap().to_pb(meta));
    }
    if stable_debt_token::Initialized::match_log(log) {
        return Some(
            stable_debt_token::Initialized::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if stable_debt_token::Mint::match_log(log) {
        return Some(stable_debt_token::Mint::decode(log).unwrap().to_pb(meta));
    }
    if stable_debt_token::Transfer::match_log(log) {
        return Some(
            stable_debt_token::Transfer::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if stable_debt_token::BorrowAllowanceDelegated::match_log(log) {
        return Some(
            stable_debt_token::BorrowAllowanceDelegated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if variable_debt_token::Approval::match_log(log) {
        return Some(
            variable_debt_token::Approval::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if variable_debt_token::Burn::match_log(log) {
        return Some(variable_debt_token::Burn::decode(log).unwrap().to_pb(meta));
    }
    if variable_debt_token::Initialized::match_log(log) {
        return Some(
            variable_debt_token::Initialized::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if variable_debt_token::Mint::match_log(log) {
        return Some(variable_debt_token::Mint::decode(log).unwrap().to_pb(meta));
    }
    if variable_debt_token::Transfer::match_log(log) {
        return Some(
            variable_debt_token::Transfer::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    if variable_debt_token::BorrowAllowanceDelegated::match_log(log) {
        return Some(
            variable_debt_token::BorrowAllowanceDelegated::decode(log)
                .unwrap()
                .to_pb(meta),
        );
    }
    None
}
