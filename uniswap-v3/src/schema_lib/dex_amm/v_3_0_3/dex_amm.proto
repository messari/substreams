syntax = "proto3";

import "erc20.proto";
import "common.proto";
import "store.proto";

package messari.dex_amm.v3_0_3;

message DataSources {
  repeated DataSource data_sources = 1;
}

message DataSource {
  DataSourceType data_source_type = 1;
  bytes address = 2;
}

enum DataSourceType {
  UniswapV3Pool = 0;
  UniswapV3Factory = 1;
}

message MappedDataSources {
  repeated PrunedTransaction pruned_transactions = 1;
  repeated messari.store.v1.StoreInstruction store_instructions = 2;
}

message PrunedTransaction {
  bytes to = 1;
  bytes from = 2;
  bytes hash = 3;
  messari.common.v1.BigInt nonce = 4;
  messari.common.v1.BigInt gas_limit = 5;
  messari.common.v1.BigInt gas_used = 6;
  messari.common.v1.BigInt gas_price = 7;

  repeated Update updates = 8;
}

message Update {
  oneof type {
    CreateDexAmmProtocol create_dex_amm_protocol = 1;
    CreateLiquidityPool create_liquidity_pool = 2;
    CreateLiquidityPoolFee create_liquidity_pool_fee = 3;
    CreateToken create_token = 4;
    CreateSwap create_swap = 5;
    CreateDeposit create_deposit = 6;
    CreateWithdraw create_withdraw = 7;
  }
}

message CreateDexAmmProtocol {
  string protocol_address = 1;
  string name = 2;
  string slug = 3;
  string schema_version = 4;
  string subgraph_version = 5; 
  string methodology_version = 6;
  string network = 7;
  string type = 8;
}

message CreateLiquidityPool {
  bytes protocol = 1;
  bytes pool_address = 2;
  repeated bytes input_tokens = 3;
  repeated bytes reward_tokens = 4;
  repeated string fees = 5;
  bool is_single_sided = 6;
  optional messari.common.v1.BigInt tick = 7;
  optional bytes liquidity_token = 8;
  optional string liquidity_token_type = 9;
}

message CreateLiquidityPoolFee {
  bytes pool_address = 1;
  string fee_type = 2;
  messari.common.v1.BigDecimal fee_percentage = 3;
}

message CreateToken {
  bytes token_address = 1;
  string name = 2;
  string symbol = 3;
  int32 decimals = 4;
} 

message CreateDeposit {
  bytes protocol = 1;
  bytes pool = 2;
  bytes account = 3;
  optional bytes position = 4;  
  messari.common.v1.BigInt liquidity = 5;
  repeated messari.common.v1.BigInt input_token_amounts = 6;
  optional messari.common.v1.BigInt tick_lower = 7;
  optional messari.common.v1.BigInt tick_upper = 8;
  messari.common.v1.BigInt log_index = 9;
  messari.common.v1.BigInt log_ordinal = 10;
}

message CreateWithdraw {
  bytes protocol = 1;
  bytes pool = 2;
  bytes account = 3;
  optional bytes position = 4;
  messari.common.v1.BigInt liquidity = 5;
  repeated messari.common.v1.BigInt input_token_amounts = 6;
  optional messari.common.v1.BigInt tick_lower = 7;
  optional messari.common.v1.BigInt tick_upper = 8;
  messari.common.v1.BigInt log_index = 9;
  messari.common.v1.BigInt log_ordinal = 10;
}

message CreateSwap {
  bytes protocol = 1;
  bytes pool = 2;
  bytes account = 3;
  repeated messari.common.v1.BigInt amounts =  4;
  messari.common.v1.BigInt liquidity = 5;
  optional messari.common.v1.BigInt tick = 6;
  messari.common.v1.BigInt log_index = 7;
  messari.common.v1.BigInt log_ordinal = 8;
}
